%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0
-module(phone).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("phone.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type msg() :: #msg{}.

-type ping_tos() :: #ping_tos{}.

-type pong_toc() :: #pong_toc{}.

-type s_role() :: #s_role{}.

-type register_tos() :: #register_tos{}.

-type register_toc() :: #register_toc{}.

-type login_tos() :: #login_tos{}.

-type login_toc() :: #login_toc{}.

-type s_chat() :: #s_chat{}.

-type chat_tos() :: #chat_tos{}.

-type chat_toc() :: #chat_toc{}.

-export_type(['msg'/0, 'ping_tos'/0, 'pong_toc'/0, 's_role'/0, 'register_tos'/0, 'register_toc'/0, 'login_tos'/0, 'login_toc'/0, 's_chat'/0, 'chat_tos'/0, 'chat_toc'/0]).

-spec encode_msg(#msg{} | #ping_tos{} | #pong_toc{} | #s_role{} | #register_tos{} | #register_toc{} | #login_tos{} | #login_toc{} | #s_chat{} | #chat_tos{} | #chat_toc{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#msg{} | #ping_tos{} | #pong_toc{} | #s_role{} | #register_tos{} | #register_toc{} | #login_tos{} | #login_toc{} | #s_chat{} | #chat_tos{} | #chat_toc{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#msg{} | #ping_tos{} | #pong_toc{} | #s_role{} | #register_tos{} | #register_toc{} | #login_tos{} | #login_toc{} | #s_chat{} | #chat_tos{} | #chat_toc{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      msg -> encode_msg_msg(id(Msg, TrUserData), TrUserData);
      ping_tos ->
	  encode_msg_ping_tos(id(Msg, TrUserData), TrUserData);
      pong_toc ->
	  encode_msg_pong_toc(id(Msg, TrUserData), TrUserData);
      s_role ->
	  encode_msg_s_role(id(Msg, TrUserData), TrUserData);
      register_tos ->
	  encode_msg_register_tos(id(Msg, TrUserData),
				  TrUserData);
      register_toc ->
	  encode_msg_register_toc(id(Msg, TrUserData),
				  TrUserData);
      login_tos ->
	  encode_msg_login_tos(id(Msg, TrUserData), TrUserData);
      login_toc ->
	  encode_msg_login_toc(id(Msg, TrUserData), TrUserData);
      s_chat ->
	  encode_msg_s_chat(id(Msg, TrUserData), TrUserData);
      chat_tos ->
	  encode_msg_chat_tos(id(Msg, TrUserData), TrUserData);
      chat_toc ->
	  encode_msg_chat_toc(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_msg(Msg, TrUserData) ->
    encode_msg_msg(Msg, <<>>, TrUserData).


encode_msg_msg(#msg{name = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	   end
    end.

encode_msg_ping_tos(Msg, TrUserData) ->
    encode_msg_ping_tos(Msg, <<>>, TrUserData).


encode_msg_ping_tos(#ping_tos{time = F1}, Bin,
		    TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	   end
    end.

encode_msg_pong_toc(_Msg, _TrUserData) -> <<>>.

encode_msg_s_role(Msg, TrUserData) ->
    encode_msg_s_role(Msg, <<>>, TrUserData).


encode_msg_s_role(#s_role{role_id = F1, role_name = F2},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	   end
    end.

encode_msg_register_tos(Msg, TrUserData) ->
    encode_msg_register_tos(Msg, <<>>, TrUserData).


encode_msg_register_tos(#register_tos{role_name = F1,
				      psd = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	   end
    end.

encode_msg_register_toc(Msg, TrUserData) ->
    encode_msg_register_toc(Msg, <<>>, TrUserData).


encode_msg_register_toc(#register_toc{code = F1,
				      role = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_mfield_register_toc_role(TrF2, <<B1/binary, 18>>,
					TrUserData)
	   end
    end.

encode_msg_login_tos(Msg, TrUserData) ->
    encode_msg_login_tos(Msg, <<>>, TrUserData).


encode_msg_login_tos(#login_tos{role_name = F1,
				psd = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	   end
    end.

encode_msg_login_toc(Msg, TrUserData) ->
    encode_msg_login_toc(Msg, <<>>, TrUserData).


encode_msg_login_toc(#login_toc{code = F1, role = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_mfield_login_toc_role(TrF2, <<B1/binary, 18>>,
				     TrUserData)
	   end
    end.

encode_msg_s_chat(Msg, TrUserData) ->
    encode_msg_s_chat(Msg, <<>>, TrUserData).


encode_msg_s_chat(#s_chat{role_id = F1, role_name = F2,
			  content = F3, time = F4, picture = F5},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	   end
    end.

encode_msg_chat_tos(Msg, TrUserData) ->
    encode_msg_chat_tos(Msg, <<>>, TrUserData).


encode_msg_chat_tos(#chat_tos{channel = F1,
			      target_id = F2, chat = F3},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_chat_tos_chat(TrF3, <<B2/binary, 26>>,
				    TrUserData)
	   end
    end.

encode_msg_chat_toc(Msg, TrUserData) ->
    encode_msg_chat_toc(Msg, <<>>, TrUserData).


encode_msg_chat_toc(#chat_toc{code = F1}, Bin,
		    TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	   end
    end.

e_mfield_register_toc_role(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_s_role(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_login_toc_role(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_s_role(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_chat_tos_chat(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_s_chat(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(msg, Bin, TrUserData) ->
    id(decode_msg_msg(Bin, TrUserData), TrUserData);
decode_msg_2_doit(ping_tos, Bin, TrUserData) ->
    id(decode_msg_ping_tos(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pong_toc, Bin, TrUserData) ->
    id(decode_msg_pong_toc(Bin, TrUserData), TrUserData);
decode_msg_2_doit(s_role, Bin, TrUserData) ->
    id(decode_msg_s_role(Bin, TrUserData), TrUserData);
decode_msg_2_doit(register_tos, Bin, TrUserData) ->
    id(decode_msg_register_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(register_toc, Bin, TrUserData) ->
    id(decode_msg_register_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(login_tos, Bin, TrUserData) ->
    id(decode_msg_login_tos(Bin, TrUserData), TrUserData);
decode_msg_2_doit(login_toc, Bin, TrUserData) ->
    id(decode_msg_login_toc(Bin, TrUserData), TrUserData);
decode_msg_2_doit(s_chat, Bin, TrUserData) ->
    id(decode_msg_s_chat(Bin, TrUserData), TrUserData);
decode_msg_2_doit(chat_tos, Bin, TrUserData) ->
    id(decode_msg_chat_tos(Bin, TrUserData), TrUserData);
decode_msg_2_doit(chat_toc, Bin, TrUserData) ->
    id(decode_msg_chat_toc(Bin, TrUserData), TrUserData).



decode_msg_msg(Bin, TrUserData) ->
    dfp_read_field_def_msg(Bin, 0, 0,
			   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_msg(<<10, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    d_field_msg_name(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_msg(<<>>, 0, 0, F@_1, _) ->
    #msg{name = F@_1};
dfp_read_field_def_msg(Other, Z1, Z2, F@_1,
		       TrUserData) ->
    dg_read_field_def_msg(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
dg_read_field_def_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_msg_name(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_msg(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_msg(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_msg(Rest, 0, 0, F@_1, TrUserData);
	    3 ->
		skip_group_msg(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_msg(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_msg(<<>>, 0, 0, F@_1, _) ->
    #msg{name = F@_1}.

d_field_msg_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, TrUserData)
    when N < 57 ->
    d_field_msg_name(Rest, N + 7, X bsl N + Acc, F@_1,
		     TrUserData);
d_field_msg_name(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_msg(RestF, 0, 0, NewFValue,
			   TrUserData).

skip_varint_msg(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    skip_varint_msg(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_msg(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_msg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_msg(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
skip_length_delimited_msg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_msg(Rest2, 0, 0, F@_1, TrUserData).

skip_group_msg(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_msg(Rest, 0, Z2, F@_1, TrUserData).

skip_32_msg(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	    TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_msg(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	    TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_ping_tos(Bin, TrUserData) ->
    dfp_read_field_def_ping_tos(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ping_tos(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_ping_tos_time(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ping_tos(<<>>, 0, 0, F@_1, _) ->
    #ping_tos{time = F@_1};
dfp_read_field_def_ping_tos(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_ping_tos(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_ping_tos(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ping_tos(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_ping_tos(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ping_tos_time(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ping_tos(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_ping_tos(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ping_tos(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_ping_tos(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_ping_tos(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ping_tos(<<>>, 0, 0, F@_1, _) ->
    #ping_tos{time = F@_1}.

d_field_ping_tos_time(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_ping_tos_time(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_ping_tos_time(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ping_tos(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_ping_tos(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_ping_tos(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ping_tos(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_ping_tos(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_ping_tos(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ping_tos(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ping_tos(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ping_tos(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_ping_tos(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ping_tos(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_ping_tos(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_ping_tos(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_ping_tos(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_ping_tos(Rest, Z1, Z2, F@_1,
				TrUserData).

decode_msg_pong_toc(Bin, TrUserData) ->
    dfp_read_field_def_pong_toc(Bin, 0, 0, TrUserData).

dfp_read_field_def_pong_toc(<<>>, 0, 0, _) ->
    #pong_toc{};
dfp_read_field_def_pong_toc(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_pong_toc(Other, Z1, Z2, TrUserData).

dg_read_field_def_pong_toc(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_pong_toc(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_pong_toc(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_pong_toc(Rest, 0, 0, TrUserData);
      1 -> skip_64_pong_toc(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_pong_toc(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_pong_toc(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_pong_toc(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_pong_toc(<<>>, 0, 0, _) ->
    #pong_toc{}.

skip_varint_pong_toc(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_pong_toc(Rest, Z1, Z2, TrUserData);
skip_varint_pong_toc(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_pong_toc(Rest, Z1, Z2, TrUserData).

skip_length_delimited_pong_toc(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_pong_toc(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_pong_toc(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pong_toc(Rest2, 0, 0, TrUserData).

skip_group_pong_toc(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_pong_toc(Rest, 0, Z2, TrUserData).

skip_32_pong_toc(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_pong_toc(Rest, Z1, Z2, TrUserData).

skip_64_pong_toc(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_pong_toc(Rest, Z1, Z2, TrUserData).

decode_msg_s_role(Bin, TrUserData) ->
    dfp_read_field_def_s_role(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_role(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_s_role_role_id(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_s_role(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_s_role_role_name(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_s_role(<<>>, 0, 0, F@_1, F@_2, _) ->
    #s_role{role_id = F@_1, role_name = F@_2};
dfp_read_field_def_s_role(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_s_role(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_s_role(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_role(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_s_role(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_role_role_id(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_s_role_role_name(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_role(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_s_role(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_s_role(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_s_role(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_s_role(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_s_role(<<>>, 0, 0, F@_1, F@_2, _) ->
    #s_role{role_id = F@_1, role_name = F@_2}.

d_field_s_role_role_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_role_role_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_s_role_role_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_s_role(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_s_role_role_name(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_role_role_name(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_s_role_role_name(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_s_role(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_s_role(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_s_role(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_s_role(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_role(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_s_role(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_role(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_s_role(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_role(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_s_role(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_role(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_s_role(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_s_role(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_s_role(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_s_role(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

decode_msg_register_tos(Bin, TrUserData) ->
    dfp_read_field_def_register_tos(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_register_tos(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_register_tos_role_name(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_register_tos(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_register_tos_psd(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_register_tos(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #register_tos{role_name = F@_1, psd = F@_2};
dfp_read_field_def_register_tos(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_register_tos(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_register_tos(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_register_tos(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_register_tos(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_register_tos_role_name(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      18 ->
	  d_field_register_tos_psd(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_register_tos(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_register_tos(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_register_tos(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_register_tos(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_register_tos(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_register_tos(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #register_tos{role_name = F@_1, psd = F@_2}.

d_field_register_tos_role_name(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_register_tos_role_name(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_register_tos_role_name(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_register_tos(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_register_tos_psd(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_register_tos_psd(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_register_tos_psd(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_register_tos(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_register_tos(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_register_tos(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_register_tos(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_register_tos(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_register_tos(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_register_tos(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_register_tos(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_register_tos(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_register_tos(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_register_tos(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_register_tos(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_register_tos(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_register_tos(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_register_tos(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

decode_msg_register_toc(Bin, TrUserData) ->
    dfp_read_field_def_register_toc(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_register_toc(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_register_toc_code(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_register_toc(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_register_toc_role(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_register_toc(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #register_toc{code = F@_1, role = F@_2};
dfp_read_field_def_register_toc(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_register_toc(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_register_toc(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_register_toc(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_register_toc(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_register_toc_code(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_register_toc_role(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_register_toc(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_register_toc(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_register_toc(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_register_toc(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_register_toc(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_register_toc(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #register_toc{code = F@_1, role = F@_2}.

d_field_register_toc_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_register_toc_code(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_register_toc_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_register_toc(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_register_toc_role(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_register_toc_role(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_register_toc_role(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_s_role(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_register_toc(RestF, 0, 0, F@_1,
				    if Prev == undefined -> NewFValue;
				       true ->
					   merge_msg_s_role(Prev, NewFValue,
							    TrUserData)
				    end,
				    TrUserData).

skip_varint_register_toc(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_register_toc(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_register_toc(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_register_toc(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_register_toc(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_register_toc(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_register_toc(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_register_toc(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_register_toc(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_register_toc(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_register_toc(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_register_toc(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_register_toc(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_register_toc(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

decode_msg_login_tos(Bin, TrUserData) ->
    dfp_read_field_def_login_tos(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_login_tos(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_login_tos_role_name(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_login_tos(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_login_tos_psd(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_login_tos(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #login_tos{role_name = F@_1, psd = F@_2};
dfp_read_field_def_login_tos(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_login_tos(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_login_tos(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_login_tos(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_login_tos(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_login_tos_role_name(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      18 ->
	  d_field_login_tos_psd(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_login_tos(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_login_tos(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_login_tos(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_login_tos(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_login_tos(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_login_tos(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #login_tos{role_name = F@_1, psd = F@_2}.

d_field_login_tos_role_name(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_login_tos_role_name(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_login_tos_role_name(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_login_tos(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_login_tos_psd(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_login_tos_psd(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_login_tos_psd(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_login_tos(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_login_tos(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_login_tos(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_login_tos(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_login_tos(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_login_tos(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_login_tos(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_login_tos(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_login_tos(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_login_tos(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_login_tos(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_login_tos(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_login_tos(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_login_tos(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_login_tos(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_login_toc(Bin, TrUserData) ->
    dfp_read_field_def_login_toc(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_login_toc(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, TrUserData) ->
    d_field_login_toc_code(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_login_toc(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_login_toc_role(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_login_toc(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #login_toc{code = F@_1, role = F@_2};
dfp_read_field_def_login_toc(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_login_toc(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_login_toc(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_login_toc(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_login_toc(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_login_toc_code(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_login_toc_role(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_login_toc(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_login_toc(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_login_toc(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_login_toc(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_login_toc(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_login_toc(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #login_toc{code = F@_1, role = F@_2}.

d_field_login_toc_code(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_login_toc_code(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_login_toc_code(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_login_toc(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_login_toc_role(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_login_toc_role(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_login_toc_role(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_s_role(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_login_toc(RestF, 0, 0, F@_1,
				 if Prev == undefined -> NewFValue;
				    true ->
					merge_msg_s_role(Prev, NewFValue,
							 TrUserData)
				 end,
				 TrUserData).

skip_varint_login_toc(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_login_toc(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_login_toc(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_login_toc(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_login_toc(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_login_toc(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_login_toc(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_login_toc(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_login_toc(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_login_toc(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_login_toc(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_login_toc(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_login_toc(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_login_toc(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_s_chat(Bin, TrUserData) ->
    dfp_read_field_def_s_chat(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_chat(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_s_chat_role_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_s_chat(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_s_chat_role_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_s_chat(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_s_chat_content(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_s_chat(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_s_chat_time(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_s_chat(<<40, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_s_chat_picture(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_s_chat(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #s_chat{role_id = F@_1, role_name = F@_2,
	    content = F@_3, time = F@_4, picture = F@_5};
dfp_read_field_def_s_chat(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_s_chat(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_s_chat(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_chat(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_s_chat(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_chat_role_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      18 ->
	  d_field_s_chat_role_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      26 ->
	  d_field_s_chat_content(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      32 ->
	  d_field_s_chat_time(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      40 ->
	  d_field_s_chat_picture(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_chat(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    1 ->
		skip_64_s_chat(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData);
	    2 ->
		skip_length_delimited_s_chat(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_s_chat(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_s_chat(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData)
	  end
    end;
dg_read_field_def_s_chat(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, _) ->
    #s_chat{role_id = F@_1, role_name = F@_2,
	    content = F@_3, time = F@_4, picture = F@_5}.

d_field_s_chat_role_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_s_chat_role_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_s_chat_role_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_s_chat(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_s_chat_role_name(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_s_chat_role_name(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_s_chat_role_name(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_s_chat(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_s_chat_content(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_s_chat_content(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_s_chat_content(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_s_chat(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, TrUserData).

d_field_s_chat_time(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_s_chat_time(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_s_chat_time(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_s_chat(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, TrUserData).

d_field_s_chat_picture(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_s_chat_picture(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_s_chat_picture(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_s_chat(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, TrUserData).

skip_varint_s_chat(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_s_chat(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
skip_varint_s_chat(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_s_chat(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_s_chat(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_chat(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_s_chat(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_chat(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_group_s_chat(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_chat(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_32_s_chat(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_s_chat(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_64_s_chat(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_s_chat(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

decode_msg_chat_tos(Bin, TrUserData) ->
    dfp_read_field_def_chat_tos(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_chat_tos(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_chat_tos_channel(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_chat_tos(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_chat_tos_target_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_chat_tos(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_chat_tos_chat(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_chat_tos(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #chat_tos{channel = F@_1, target_id = F@_2,
	      chat = F@_3};
dfp_read_field_def_chat_tos(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_chat_tos(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_chat_tos(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_chat_tos(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_chat_tos(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_chat_tos_channel(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      16 ->
	  d_field_chat_tos_target_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      26 ->
	  d_field_chat_tos_chat(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_chat_tos(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_chat_tos(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_chat_tos(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_chat_tos(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_chat_tos(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_chat_tos(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #chat_tos{channel = F@_1, target_id = F@_2,
	      chat = F@_3}.

d_field_chat_tos_channel(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_chat_tos_channel(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_chat_tos_channel(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_chat_tos(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_chat_tos_target_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_chat_tos_target_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_chat_tos_target_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_chat_tos(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_chat_tos_chat(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_chat_tos_chat(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_chat_tos_chat(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_s_chat(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_chat_tos(RestF, 0, 0, F@_1, F@_2,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_s_chat(Prev, NewFValue,
							TrUserData)
				end,
				TrUserData).

skip_varint_chat_tos(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_chat_tos(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_chat_tos(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_chat_tos(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_chat_tos(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_chat_tos(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_chat_tos(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_chat_tos(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_chat_tos(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_chat_tos(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_chat_tos(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_chat_tos(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_chat_tos(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_chat_tos(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

decode_msg_chat_toc(Bin, TrUserData) ->
    dfp_read_field_def_chat_toc(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_chat_toc(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_chat_toc_code(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_chat_toc(<<>>, 0, 0, F@_1, _) ->
    #chat_toc{code = F@_1};
dfp_read_field_def_chat_toc(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_chat_toc(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_chat_toc(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_chat_toc(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_chat_toc(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_chat_toc_code(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_chat_toc(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_chat_toc(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_chat_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_chat_toc(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_chat_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_chat_toc(<<>>, 0, 0, F@_1, _) ->
    #chat_toc{code = F@_1}.

d_field_chat_toc_code(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_chat_toc_code(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_chat_toc_code(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_chat_toc(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_chat_toc(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_chat_toc(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_chat_toc(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_chat_toc(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_chat_toc(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_chat_toc(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_chat_toc(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_chat_toc(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_chat_toc(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_chat_toc(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_chat_toc(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_chat_toc(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_chat_toc(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_chat_toc(Rest, Z1, Z2, F@_1,
				TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      msg -> merge_msg_msg(Prev, New, TrUserData);
      ping_tos -> merge_msg_ping_tos(Prev, New, TrUserData);
      pong_toc -> merge_msg_pong_toc(Prev, New, TrUserData);
      s_role -> merge_msg_s_role(Prev, New, TrUserData);
      register_tos ->
	  merge_msg_register_tos(Prev, New, TrUserData);
      register_toc ->
	  merge_msg_register_toc(Prev, New, TrUserData);
      login_tos -> merge_msg_login_tos(Prev, New, TrUserData);
      login_toc -> merge_msg_login_toc(Prev, New, TrUserData);
      s_chat -> merge_msg_s_chat(Prev, New, TrUserData);
      chat_tos -> merge_msg_chat_tos(Prev, New, TrUserData);
      chat_toc -> merge_msg_chat_toc(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_msg/3}).
merge_msg_msg(#msg{name = PFname}, #msg{name = NFname},
	      _) ->
    #msg{name =
	     if NFname =:= undefined -> PFname;
		true -> NFname
	     end}.

-compile({nowarn_unused_function,merge_msg_ping_tos/3}).
merge_msg_ping_tos(#ping_tos{time = PFtime},
		   #ping_tos{time = NFtime}, _) ->
    #ping_tos{time =
		  if NFtime =:= undefined -> PFtime;
		     true -> NFtime
		  end}.

-compile({nowarn_unused_function,merge_msg_pong_toc/3}).
merge_msg_pong_toc(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_s_role/3}).
merge_msg_s_role(#s_role{role_id = PFrole_id,
			 role_name = PFrole_name},
		 #s_role{role_id = NFrole_id, role_name = NFrole_name},
		 _) ->
    #s_role{role_id =
		if NFrole_id =:= undefined -> PFrole_id;
		   true -> NFrole_id
		end,
	    role_name =
		if NFrole_name =:= undefined -> PFrole_name;
		   true -> NFrole_name
		end}.

-compile({nowarn_unused_function,merge_msg_register_tos/3}).
merge_msg_register_tos(#register_tos{role_name =
					 PFrole_name,
				     psd = PFpsd},
		       #register_tos{role_name = NFrole_name, psd = NFpsd},
		       _) ->
    #register_tos{role_name =
		      if NFrole_name =:= undefined -> PFrole_name;
			 true -> NFrole_name
		      end,
		  psd =
		      if NFpsd =:= undefined -> PFpsd;
			 true -> NFpsd
		      end}.

-compile({nowarn_unused_function,merge_msg_register_toc/3}).
merge_msg_register_toc(#register_toc{code = PFcode,
				     role = PFrole},
		       #register_toc{code = NFcode, role = NFrole},
		       TrUserData) ->
    #register_toc{code =
		      if NFcode =:= undefined -> PFcode;
			 true -> NFcode
		      end,
		  role =
		      if PFrole /= undefined, NFrole /= undefined ->
			     merge_msg_s_role(PFrole, NFrole, TrUserData);
			 PFrole == undefined -> NFrole;
			 NFrole == undefined -> PFrole
		      end}.

-compile({nowarn_unused_function,merge_msg_login_tos/3}).
merge_msg_login_tos(#login_tos{role_name = PFrole_name,
			       psd = PFpsd},
		    #login_tos{role_name = NFrole_name, psd = NFpsd}, _) ->
    #login_tos{role_name =
		   if NFrole_name =:= undefined -> PFrole_name;
		      true -> NFrole_name
		   end,
	       psd =
		   if NFpsd =:= undefined -> PFpsd;
		      true -> NFpsd
		   end}.

-compile({nowarn_unused_function,merge_msg_login_toc/3}).
merge_msg_login_toc(#login_toc{code = PFcode,
			       role = PFrole},
		    #login_toc{code = NFcode, role = NFrole}, TrUserData) ->
    #login_toc{code =
		   if NFcode =:= undefined -> PFcode;
		      true -> NFcode
		   end,
	       role =
		   if PFrole /= undefined, NFrole /= undefined ->
			  merge_msg_s_role(PFrole, NFrole, TrUserData);
		      PFrole == undefined -> NFrole;
		      NFrole == undefined -> PFrole
		   end}.

-compile({nowarn_unused_function,merge_msg_s_chat/3}).
merge_msg_s_chat(#s_chat{role_id = PFrole_id,
			 role_name = PFrole_name, content = PFcontent,
			 time = PFtime, picture = PFpicture},
		 #s_chat{role_id = NFrole_id, role_name = NFrole_name,
			 content = NFcontent, time = NFtime,
			 picture = NFpicture},
		 _) ->
    #s_chat{role_id =
		if NFrole_id =:= undefined -> PFrole_id;
		   true -> NFrole_id
		end,
	    role_name =
		if NFrole_name =:= undefined -> PFrole_name;
		   true -> NFrole_name
		end,
	    content =
		if NFcontent =:= undefined -> PFcontent;
		   true -> NFcontent
		end,
	    time =
		if NFtime =:= undefined -> PFtime;
		   true -> NFtime
		end,
	    picture =
		if NFpicture =:= undefined -> PFpicture;
		   true -> NFpicture
		end}.

-compile({nowarn_unused_function,merge_msg_chat_tos/3}).
merge_msg_chat_tos(#chat_tos{channel = PFchannel,
			     target_id = PFtarget_id, chat = PFchat},
		   #chat_tos{channel = NFchannel, target_id = NFtarget_id,
			     chat = NFchat},
		   TrUserData) ->
    #chat_tos{channel =
		  if NFchannel =:= undefined -> PFchannel;
		     true -> NFchannel
		  end,
	      target_id =
		  if NFtarget_id =:= undefined -> PFtarget_id;
		     true -> NFtarget_id
		  end,
	      chat =
		  if PFchat /= undefined, NFchat /= undefined ->
			 merge_msg_s_chat(PFchat, NFchat, TrUserData);
		     PFchat == undefined -> NFchat;
		     NFchat == undefined -> PFchat
		  end}.

-compile({nowarn_unused_function,merge_msg_chat_toc/3}).
merge_msg_chat_toc(#chat_toc{code = PFcode},
		   #chat_toc{code = NFcode}, _) ->
    #chat_toc{code =
		  if NFcode =:= undefined -> PFcode;
		     true -> NFcode
		  end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      msg -> v_msg_msg(Msg, [MsgName], TrUserData);
      ping_tos -> v_msg_ping_tos(Msg, [MsgName], TrUserData);
      pong_toc -> v_msg_pong_toc(Msg, [MsgName], TrUserData);
      s_role -> v_msg_s_role(Msg, [MsgName], TrUserData);
      register_tos ->
	  v_msg_register_tos(Msg, [MsgName], TrUserData);
      register_toc ->
	  v_msg_register_toc(Msg, [MsgName], TrUserData);
      login_tos ->
	  v_msg_login_tos(Msg, [MsgName], TrUserData);
      login_toc ->
	  v_msg_login_toc(Msg, [MsgName], TrUserData);
      s_chat -> v_msg_s_chat(Msg, [MsgName], TrUserData);
      chat_tos -> v_msg_chat_tos(Msg, [MsgName], TrUserData);
      chat_toc -> v_msg_chat_toc(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_msg/3}).
-dialyzer({nowarn_function,v_msg_msg/3}).
v_msg_msg(#msg{name = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path], TrUserData)
    end,
    ok;
v_msg_msg(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, msg}, X, Path).

-compile({nowarn_unused_function,v_msg_ping_tos/3}).
-dialyzer({nowarn_function,v_msg_ping_tos/3}).
v_msg_ping_tos(#ping_tos{time = F1}, Path,
	       TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [time | Path], TrUserData)
    end,
    ok;
v_msg_ping_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, ping_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_pong_toc/3}).
-dialyzer({nowarn_function,v_msg_pong_toc/3}).
v_msg_pong_toc(#pong_toc{}, _Path, _) -> ok;
v_msg_pong_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, pong_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_s_role/3}).
-dialyzer({nowarn_function,v_msg_s_role/3}).
v_msg_s_role(#s_role{role_id = F1, role_name = F2},
	     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [role_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [role_name | Path], TrUserData)
    end,
    ok;
v_msg_s_role(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, s_role}, X, Path).

-compile({nowarn_unused_function,v_msg_register_tos/3}).
-dialyzer({nowarn_function,v_msg_register_tos/3}).
v_msg_register_tos(#register_tos{role_name = F1,
				 psd = F2},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [role_name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [psd | Path], TrUserData)
    end,
    ok;
v_msg_register_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, register_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_register_toc/3}).
-dialyzer({nowarn_function,v_msg_register_toc/3}).
v_msg_register_toc(#register_toc{code = F1, role = F2},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_s_role(F2, [role | Path], TrUserData)
    end,
    ok;
v_msg_register_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, register_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_login_tos/3}).
-dialyzer({nowarn_function,v_msg_login_tos/3}).
v_msg_login_tos(#login_tos{role_name = F1, psd = F2},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [role_name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [psd | Path], TrUserData)
    end,
    ok;
v_msg_login_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, login_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_login_toc/3}).
-dialyzer({nowarn_function,v_msg_login_toc/3}).
v_msg_login_toc(#login_toc{code = F1, role = F2}, Path,
		TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_s_role(F2, [role | Path], TrUserData)
    end,
    ok;
v_msg_login_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, login_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_s_chat/3}).
-dialyzer({nowarn_function,v_msg_s_chat/3}).
v_msg_s_chat(#s_chat{role_id = F1, role_name = F2,
		     content = F3, time = F4, picture = F5},
	     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [role_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [role_name | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [content | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [time | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [picture | Path], TrUserData)
    end,
    ok;
v_msg_s_chat(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, s_chat}, X, Path).

-compile({nowarn_unused_function,v_msg_chat_tos/3}).
-dialyzer({nowarn_function,v_msg_chat_tos/3}).
v_msg_chat_tos(#chat_tos{channel = F1, target_id = F2,
			 chat = F3},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [channel | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [target_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_s_chat(F3, [chat | Path], TrUserData)
    end,
    ok;
v_msg_chat_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, chat_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_chat_toc/3}).
-dialyzer({nowarn_function,v_msg_chat_toc/3}).
v_msg_chat_toc(#chat_toc{code = F1}, Path,
	       TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path], TrUserData)
    end,
    ok;
v_msg_chat_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, chat_toc}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, msg},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, ping_tos},
      [#field{name = time, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, pong_toc}, []},
     {{msg, s_role},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = optional, opts = []},
       #field{name = role_name, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, register_tos},
      [#field{name = role_name, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = psd, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, register_toc},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = role, fnum = 2, rnum = 3,
	      type = {msg, s_role}, occurrence = optional,
	      opts = []}]},
     {{msg, login_tos},
      [#field{name = role_name, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = psd, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, login_toc},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = role, fnum = 2, rnum = 3,
	      type = {msg, s_role}, occurrence = optional,
	      opts = []}]},
     {{msg, s_chat},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = optional, opts = []},
       #field{name = role_name, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = content, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = time, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []},
       #field{name = picture, fnum = 5, rnum = 6, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, chat_tos},
      [#field{name = channel, fnum = 1, rnum = 2,
	      type = int32, occurrence = optional, opts = []},
       #field{name = target_id, fnum = 2, rnum = 3,
	      type = int32, occurrence = optional, opts = []},
       #field{name = chat, fnum = 3, rnum = 4,
	      type = {msg, s_chat}, occurrence = optional,
	      opts = []}]},
     {{msg, chat_toc},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    [msg, ping_tos, pong_toc, s_role, register_tos,
     register_toc, login_tos, login_toc, s_chat, chat_tos,
     chat_toc].


get_group_names() -> [].


get_msg_or_group_names() ->
    [msg, ping_tos, pong_toc, s_role, register_tos,
     register_toc, login_tos, login_toc, s_chat, chat_tos,
     chat_toc].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(msg) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(ping_tos) ->
    [#field{name = time, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(pong_toc) -> [];
find_msg_def(s_role) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = optional, opts = []},
     #field{name = role_name, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(register_tos) ->
    [#field{name = role_name, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = psd, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(register_toc) ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = role, fnum = 2, rnum = 3,
	    type = {msg, s_role}, occurrence = optional,
	    opts = []}];
find_msg_def(login_tos) ->
    [#field{name = role_name, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = psd, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(login_toc) ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = role, fnum = 2, rnum = 3,
	    type = {msg, s_role}, occurrence = optional,
	    opts = []}];
find_msg_def(s_chat) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = optional, opts = []},
     #field{name = role_name, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = content, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = time, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []},
     #field{name = picture, fnum = 5, rnum = 6, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(chat_tos) ->
    [#field{name = channel, fnum = 1, rnum = 2,
	    type = int32, occurrence = optional, opts = []},
     #field{name = target_id, fnum = 2, rnum = 3,
	    type = int32, occurrence = optional, opts = []},
     #field{name = chat, fnum = 3, rnum = 4,
	    type = {msg, s_chat}, occurrence = optional,
	    opts = []}];
find_msg_def(chat_toc) ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.4.0".

gpb_version_as_list() ->
    [4,4,0].
